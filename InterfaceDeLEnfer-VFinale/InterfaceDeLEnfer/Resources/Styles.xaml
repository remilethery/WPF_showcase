<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    
    <!-- Style accesible pour tous les types de contrôle -->
    <Style x:Key="Style1" TargetType="Control">
        <Setter Property="Background" Value="Yellow"></Setter>
    </Style>
    <!-- Style accessible pour tous les types de contrôle -->
    <Style x:Key="Style2" BasedOn="{StaticResource Style1}" TargetType="Control">
        <Setter Property="Foreground" Value="Blue" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="20" />
    </Style>

    <Style x:Key="MouseOverButton" TargetType="Button">
        <!-- Style Trigger : On ne fait qu'un contrôle sur le mouse over -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="TextBlock.Foreground" Value="Blue"/>
                <Setter Property="TextBlock.FontWeight" Value="Bold"/>
                <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
            </Trigger>
            <!-- Tentative de création d'un binding => Trop compliqué et pas adapté
            <DataTrigger Binding="{Binding SelectedIndex, ElementName=myComboBox}" Value="0">
                <Setter Property="IsEnabled" Value="True" />
            </DataTrigger>
            -->
            <!-- Crée un DataTrigger sur la comboBox de nom myComboBox qui enable le bouton si du texte existe -->
            <DataTrigger Binding="{Binding ElementName=myComboBox, Path=Text}" Value="">
                <Setter Property="IsEnabled" Value="False"></Setter>
            </DataTrigger>
                        
        </Style.Triggers>

    </Style>
    
    <!-- Modifier le fonctionnement des boutons radios pour changer le blocktexte texteConnexion :   -->
    <!-- Authentif SQL => SQL ; Authentif Windows => Windows                                         -->
    <!-- On crée d'abord un texte par défaut, puis on le modifie en fonction de IsChecked sur chaque RadioButton-->

    <Style x:Key="texteConnexion" TargetType="TextBlock">
        <Setter Property="Text" Value="En attente de sélection d'Authentification"></Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsChecked, ElementName=RadiobtnWindows}" Value="True">
                <Setter Property="Text" Value="Authentification Windows du Q"></Setter>
                <Setter Property="Foreground" Value="Firebrick"></Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsChecked, ElementName=RadiobtnSQL}" Value="True">
                <Setter Property="Text" Value="Authentification SQL du Zboub"></Setter>
                <Setter Property="Foreground" Value="Orchid"></Setter>
            </DataTrigger>

        </Style.Triggers>
    </Style>
    

    <ControlTemplate x:Key="OvalButton" TargetType="Button">
        <Grid>
            <!-- Utilisation d'une couleur unie pour remplir l'élipse -->
            <Ellipse Fill="Aquamarine">
                <!-- Rayon de courbure de l'élipse -->
                <Ellipse.BitmapEffect>
                    <BlurBitmapEffect Radius="5"/>
                </Ellipse.BitmapEffect>
            </Ellipse>
            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center"></ContentPresenter>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="OvalButtonRose" TargetType="Button">
        <Grid>
            <Ellipse>
                <!-- Utilisation d'un dégradé pour remplir l'élipse-->
                <Ellipse.Fill>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" >
                        <GradientStop Color="Pink"  Offset="0" />
                        <GradientStop Color="White"  Offset="1" />
                    </LinearGradientBrush>
                </Ellipse.Fill>
                
                <!-- Rayon de courbure de l'élipse -->
                <Ellipse.BitmapEffect>
                    <BlurBitmapEffect Radius="5"/>
                </Ellipse.BitmapEffect>
            </Ellipse>
            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center"></ContentPresenter>
        </Grid>
        <ControlTemplate.Triggers>
            <EventTrigger RoutedEvent="MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.150" Storyboard.TargetProperty="FontSize" To="30"></DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:0.150" Storyboard.TargetProperty="FontSize" To="12"></DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    

    <ControlTemplate x:Key="OvalButtonGreen" TargetType="Button">
        <Grid x:Name="ButtonGrid" Background="Transparent">
            <Ellipse>
                <!-- Utilisation d'un dégradé pour remplir l'élipse-->
                <Ellipse.Fill>
                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1" >
                        <GradientStop Color="Aqua"  Offset="0" />
                        <GradientStop Color="LightCoral"  Offset="0.5" />
                        <GradientStop Color="White"  Offset="1.0" />
                    </LinearGradientBrush>
                </Ellipse.Fill>

                <!-- Rayon de courbure de l'élipse -->
                <Ellipse.BitmapEffect>
                    <BlurBitmapEffect Radius="5"/>
                </Ellipse.BitmapEffect>
            </Ellipse>
            <Border x:Name="border"
                    BorderBrush="White"
                    BorderThickness="2"
                    CornerRadius="8"></Border>
            <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="Center"></ContentPresenter>
            <Grid.RenderTransform>
                <ScaleTransform />
            </Grid.RenderTransform>
        </Grid>
        
        <!-- Création d'un event Trigger permettant de créer une animation plus ou moins complexe. -->
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="border" Property="BorderBrush" Value="Blue"/>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Duration="0:0:0.05"
                                Storyboard.TargetName="ButtonGrid"
                                Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"
                                To="2"/>
                            <DoubleAnimation
                                Duration="0:0:0.05"
                                Storyboard.TargetName="ButtonGrid"
                                Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"
                                To="2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation
                                Duration="0:0:0.05"
                                Storyboard.TargetName="ButtonGrid"
                                Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleX)"
                                To="1.08"/>
                            <DoubleAnimation
                                Duration="0:0:0.05"
                                Storyboard.TargetName="ButtonGrid"
                                Storyboard.TargetProperty="(RenderTransform).(ScaleTransform.ScaleY)"
                                To="1.08"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    
    
</ResourceDictionary>