<Window x:Class="InterfaceDeLEnfer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:InterfaceDeLEnfer"
        mc:Ignorable="d"
        Title="Interface de la Muerte" 
        Height="600" Width="1000">
    
    <!--                                  -->
    <!-- Dock Panel - Conteneur principal -->
    <!--                                  -->
    <DockPanel ButtonBase.Click="btnSimpleMessageBox_Click">
        <ToolBar DockPanel.Dock="Top" HorizontalAlignment="Right" >
            <Button Content="{StaticResource ClearStats}"/>
            <Button Content="{StaticResource SaveLastAnalysis}"/>
            <Button Content="{StaticResource ValidateHermeticus}"/>
            <Button Content="{StaticResource About}"/>
        </ToolBar>
        <StatusBar DockPanel.Dock="Bottom">
            <StatusBarItem Content="un"></StatusBarItem>
            <StatusBarItem Content="deux"></StatusBarItem>
            <StatusBarItem Content="screugneugneu"></StatusBarItem>
        </StatusBar>
        <TreeView DockPanel.Dock="Left" Width="250">
        </TreeView>

        <TabControl>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="images/SQLServer.ico"></Image>
                        <TextBlock Text="{StaticResource Connection}" Foreground="Blue"></TextBlock>
                    </StackPanel>
                </TabItem.Header>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="276"></ColumnDefinition>
                        <ColumnDefinition Width="Auto" MinWidth="276"></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                        <RowDefinition Height="Auto"></RowDefinition>
                    </Grid.RowDefinitions>
                    <StackPanel>
                        <TextBlock Text="Bienvenue, veuillez vous connecter svp" Grid.Column="0" Grid.Row="0"></TextBlock>
                        <ComboBox Name="myComboBox" Grid.Column="0" Grid.Row="1" IsEditable="True">
                            <ComboBoxItem Content="Exemple1"></ComboBoxItem>
                            <ComboBoxItem Content="Exemple2"></ComboBoxItem>
                        </ComboBox>
                    </StackPanel>
                    <GroupBox Grid.Column="0" Grid.Row="2"
                        Header="{StaticResource Authentication}" Margin="10" Padding="10">
                        <StackPanel>
                            <RadioButton x:Name="RadiobtnWindows" Content="{StaticResource WindowsAuthentication}"></RadioButton>
                            <RadioButton x:Name="RadiobtnSQL" Content="{StaticResource SqlAuthentication}"></RadioButton>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"></ColumnDefinition>
                                    <ColumnDefinition Width="*"></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                </Grid.RowDefinitions>


                                <Label Content="Login :" Grid.Column="0" Grid.Row="0"></Label>
                                <TextBox Grid.Column="1" Grid.Row="0">USER</TextBox>
                                <Label Content="Mot de Passe :" Grid.Column="0" Grid.Row="1"></Label>
                                <TextBox Grid.Column="1" Grid.Row="1">PASSWORD</TextBox>
                            </Grid>
                        </StackPanel>
                    </GroupBox>

                    <StackPanel Grid.Column="0" Grid.Row="3" Orientation="Horizontal">
                        <StackPanel.Resources>
                            <Style TargetType="Button">
                                <Setter Property="Margin" Value="5, 0, 0, 0"></Setter>
                                <Setter Property="Foreground"  Value="BlueViolet"></Setter>
                            </Style>
                        </StackPanel.Resources>
                        <Button Content="{StaticResource Connect}" 
                                Click="btnSimpleMessageBox_Click" 
                                Template="{StaticResource OvalButton}"
                                Style="{StaticResource MouseOverButton}"></Button>
                        <Button Content="{StaticResource Analyze}" Template="{StaticResource OvalButtonRose}"></Button>
                        <Button Content="{StaticResource CacheExplorer}" Template="{StaticResource OvalButtonGreen}"></Button>
                        <Button Content="Test" Margin="5,0,0,1" Click="Button_Click2"/>
                    </StackPanel>

                    <TextBlock Grid.Column="0" Grid.Row="4" Margin="10"
                               Style="{StaticResource texteConnexion}"></TextBlock>

                    <Label Content="{StaticResource Databases}" Grid.Column="0" Grid.Row="5"></Label>
                    <DataGrid x:Name="myDataGrid" AutoGenerateColumns="False" Grid.Column="0" Grid.Row="6">
                        <DataGrid.Columns>
                            <DataGridTextColumn Header="{StaticResource Analyze}"/>
                            <DataGridTextColumn Header="{StaticResource Database}"/>
                            <DataGridTextColumn Header="{StaticResource Compatibility}"/>
                        </DataGrid.Columns>
                    </DataGrid>
                    <StackPanel Grid.Column="0" Grid.Row="7" Orientation="Horizontal">
                        <Label Content="Titre de la fenêtre :"></Label>
                        <!-- Le binding va chercher les informations dans le Contexte défini dans le code behind -->
                        <!-- Par défaut, le binding n'a pas besoin de source relative 
                                    ou d'un élément, il prend le contexte de la fenêtre quand il est défini -->
                        <TextBox x:Name="windowName" 
                                 Text="{Binding Path=Title, UpdateSourceTrigger=PropertyChanged}"
                                 Height="20" Width="150"></TextBox>
                    </StackPanel>
                    <StackPanel Grid.Column="0" Grid.Row="8" Orientation="Horizontal">
                        <Label Content="Taille de la fenêtre :"></Label>
                        <!-- Le binding va chercher les informations dans le Contexte défini dans le code behind -->
                        <TextBox x:Name="windowX" 
                                 Text="{Binding Path=Width}"
                                 Height="20" Width="60"></TextBox>
                        <Label Content=" x "></Label>
                        <!-- Le binding va chercher les informations dans le Contexte défini dans le code behind -->
                        <!-- On peut se passer de Path=, car il va chercher directement dans le contexte cette clé -->
                        <TextBox x:Name="windowY"
                                 Text="{Binding Height}"
                                 Height="20" Width="60"></TextBox>
                        
                    </StackPanel>
                    
                    <!-- Ajout d'un slider avec un champ texte qui se met à jour en fonction du slider -->
                    <!-- On crée le slider avec une valeur min&max 
                         On ajoute un tickplacement pour avoir une graduation plus un tickfrequency et 
                         un issnaptotickenabled pour forcer la valeur à être un entier-->
                    <StackPanel Grid.Column="0" Grid.Row="9" Orientation="Horizontal">
                        <Slider x:Name="mySlider" Minimum="5" Maximum="100" Width="200" 
                                TickPlacement="BottomRight" TickFrequency="1"
                                IsSnapToTickEnabled="True"></Slider>

                       <!-- On crée un binding entre la textbox et le titre de la fenêtre, 
                        pour cela, on va chercher un ancestor avec findancestor
                        on peut aussi aller chercher un ancestor plus haut avec ancesterlevel=... -->
                        <!-- <TextBox x:Name="sliderValue" 
                                 Text="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}},
                                                Path=Title,
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"></TextBox> -->

                        <!-- On crée une Textbox avec un binding sur la valeur (value du slider nommé) 
                         Si on rajoute Mode=Oneway, on bloque l'update au textbox ;
                           dans le cas contraire, on peut agir sur la textbox pour jouer sur le slider.
                         Avec Mode=OneTime, on fixe la valeur sans pouvoir la modifier avec le slider, 
                           cela n'agit pas sur le slider.
                         Avec Mode=OneWayToSource, on fixe la valeur dans la TextBox, 
                           cela fixe la valeur dans le slider mais on ne pourra pas le modifier.
                         Avec Mode=TwoWay, on lie les deux valeurs, on ajoute également UpdateSourceTrigger pour 
                           rajouter un trigger sur le changement de propriété.
                        
                        https://docs.microsoft.com/fr-fr/dotnet/desktop-wpf/data/data-binding-overview?view=netframework-4.8 -->

                        <!-- La taille du text box s'agrandit ou se réduit en fonction du slider -->
                        
                        <!-- Width="{Binding RelativeSource={RelativeSource Self}, 
                                                 Path=Text}"></TextBox> -->
                        <!-- La taille du text box s'agrandit ou se réduit en fonction de la taille de la fenêtre 
                        <TextBox x:Name="sliderValue" 
                                 Text="{Binding ElementName=mySlider, 
                                                Path=Value, 
                                                Mode=TwoWay,
                                                UpdateSourceTrigger=PropertyChanged}"
                                 Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}},
                                         Path=ActualWidth}"></TextBox>
                        -->
                        <TextBox Text="{Binding Path=.}"></TextBox>
                    </StackPanel>
                    <!-- On utilise le datacontext Employee pour aller chercher les informations grâce -->
                    <!-- aux Getters / Setters définis dans la classe -->
                    <WrapPanel Grid.Column="0" Grid.Row="10">
                        <TextBox Text="{Binding Path=LastName}" Width="80" ></TextBox>
                        <TextBox Text="{Binding Path=FirstName}" Width="80"></TextBox>
                        <TextBox Text="{Binding Path=Age}" Width="80" ></TextBox>
                    </WrapPanel>
                    

                    <!-- Création d'une list box permettant d'afficher les informations des employés -->
                    <!-- Sachant qu'on a chargé la liste des employés comme datacontext, on a juste besoin de -->
                    <!-- faire le lien avec le binding sur le datacontext courant qui est cette liste -->
                    <!-- Puis on affiche les infos des employés dans une grille -->
                    
                    <ListBox x:Name="listBoxEmployees" Grid.Row="0" Grid.Column="1" Margin="10"
                             ItemsSource="{Binding List_employee}"
                             SelectedItem="{Binding SelectedItem}">
                        <ListBox.ItemTemplate>
                        <DataTemplate>
                                <Grid Margin="2">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="100"></ColumnDefinition>
                                        <ColumnDefinition Width="100"></ColumnDefinition>
                                        <ColumnDefinition Width="100"></ColumnDefinition>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Text="{Binding Path=LastName}" Grid.Column="0"/>
                                    <TextBlock Text="{Binding Path=FirstName}" Grid.Column="1"/>
                                    <TextBlock Text="{Binding Path=Age}" Grid.Column="2"/>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <!-- Création de champs pour entrer des données dans la liste + boutons appropriés liés aux
                            Méthodes dans le code-behind -->
                    
                    <WrapPanel Grid.Column="1" Grid.Row="1">
                        <TextBox x:Name="LName" Grid.Row="1" TextWrapping="Wrap" Width="120"/>
                        <TextBox x:Name="FName" Grid.Row="1" TextWrapping="Wrap" Width="120"/>
                        <TextBox x:Name="EAge" Grid.Row="1" TextWrapping="Wrap" Width="120"/>
                    </WrapPanel>
                    <WrapPanel Grid.Column="1" Grid.Row="2">
                        <Button Content="{StaticResource AddEmployee}" Click="Button_Click_AddEmployee"
                            Width="100" Height="20"></Button>
                        <Button Content="{StaticResource RemoveEmployee}" Click="Button_Click_RemoveEmployee"
                            Width="100" Height="20"></Button>
                        <Button Content="{StaticResource ModifyEmployee}" Click="Button_Click_ModifyEmployee"
                            Width="100" Height="20"></Button>
                    </WrapPanel>
                    
                    <!-- On peut aussi utiliser la solution du databinding pour modifier directement les éléments dans la liste -->
                    <!-- 
                    <WrapPanel Grid.Column="1" Grid.Row="2">
                        <TextBlock Text="Nom :"/>
                        <TextBlock Width="20" DataContext={Bindind ElementName=listBoxEmployees, Path=SelectedItem}
                            Text="{Binding Name}"></TextBox>
                        <TextBlock Text="Prénom :"/>
                        <TextBlock Width="20" DataContext={Bindind ElementName=listBoxEmployees, Path=SelectedItem}
                            Text="{Binding FirstName}"></TextBox><TextBlock Text="Nom :"/>
                        <TextBlock Text="Age :"/>
                        <TextBlock Width="20" DataContext={Bindind ElementName=listBoxEmployees, Path=SelectedItem}
                            Text="{Binding Age}"></TextBox>
                    </WrapPanel
                    -->
                    

                </Grid>






            </TabItem>
            <TabItem>
                <TabItem.Header>
                    <StackPanel Orientation="Horizontal">
                        <Image Source="images/Open.ico"></Image>
                        <TextBlock Text="{StaticResource Results}" Foreground="Green"></TextBlock>
                    </StackPanel>
                </TabItem.Header>
            </TabItem>
        </TabControl>
    </DockPanel>
</Window>
